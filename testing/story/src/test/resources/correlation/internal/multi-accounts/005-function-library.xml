<!--
  ~ Copyright (C) 2010-2022 Evolveum and contributors
  ~
  ~ This work is dual-licensed under the Apache License 2.0
  ~ and European Union Public License. See LICENSE file for details.
  -->

<functionLibrary oid="c4b1f289-e45a-4788-9c53-00601e1c8ed2"
                 xmlns='http://midpoint.evolveum.com/xml/ns/public/common/common-3'
                 xmlns:c='http://midpoint.evolveum.com/xml/ns/public/common/common-3'
                 xmlns:xsd='http://www.w3.org/2001/XMLSchema'>
    <name>mylib</name>
    <function>
        <name>createAssignment</name>
        <parameter>
            <name>subtype</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>sourceId</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>givenName</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>familyName</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>dateOfBirth</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>nationalId</name>
            <type>xsd:string</type>
        </parameter>
        <parameter>
            <name>targetName</name>
            <type>xsd:string</type>
        </parameter>
        <returnType>c:AssignmentType</returnType>
        <returnMultiplicity>single</returnMultiplicity>
        <script>
            <code>
                import com.evolveum.midpoint.xml.ns._public.common.common_3.*

                import static com.evolveum.midpoint.testing.story.correlation.IdMatchTestUtil.normalizeNationalId

                import com.evolveum.midpoint.schema.util.*
                import com.evolveum.midpoint.prism.path.*

                def assignment = new AssignmentType(midpoint.prismContext)
                        .subtype(subtype)
                        .subtype(subtype + '-' + sourceId)

                setExtensionValue(assignment, 'sourceId', sourceId)
                setExtensionValue(assignment, 'givenName', givenName)
                setExtensionValue(assignment, 'familyName', familyName)
                setExtensionValue(assignment, 'dateOfBirth', dateOfBirth)
                setExtensionValue(assignment, 'nationalId', normalizeNationalId(nationalId))
                setExtensionValue(assignment, 'correlation', true)

                if (targetName != null) {
                    target = midpoint.getOrgByName(targetName)
                    if (target != null) {
                        assignment.targetRef(target.oid, OrgType.COMPLEX_TYPE)
                    }
                    // TODO else undefined?
                }

                assignment

                def setExtensionValue(containerable, name, value) {
                    if (value != null) {
                        ObjectTypeUtil.setExtensionPropertyRealValues(
                                midpoint.prismContext, containerable.asPrismContainerValue(), new ItemName(name),
                                value)
                    } else {
                        ObjectTypeUtil.setExtensionPropertyRealValues(
                                midpoint.prismContext, containerable.asPrismContainerValue(), new ItemName(name))
                    }
                }
            </code>
        </script>
    </function>

    <function>
        <name>getPersonalDataItem</name>
        <documentation>
            Selects the assignment that contains the most authoritative personal data.
        </documentation>
        <parameter>
            <name>assignments</name>
            <type>c:AssignmentType</type>
        </parameter>
        <parameter>
            <name>itemName</name>
            <type>xsd:string</type>
        </parameter>
        <returnType>xsd:string</returnType>
        <returnMultiplicity>single</returnMultiplicity>
        <script>
            <code>

                import com.evolveum.midpoint.prism.path.ItemName
                import com.evolveum.midpoint.schema.util.ObjectTypeUtil

                // Here would be some very smart code evaluating specified business rules aimed to pick
                // the most accurate and precise data.

                // Currently we simply take the assignment with the "lowest" ID.

                def sourceId = new ItemName('sourceId')

                if (assignments == null || assignments.isEmpty()) {
                    return null
                }

                sorted = new ArrayList(assignments)
                sorted.sort { ObjectTypeUtil.getExtensionItemRealValue(it.asPrismContainerValue(), sourceId) }

                def assignment = sorted.iterator().next()
                ObjectTypeUtil.getExtensionItemRealValue(assignment.asPrismContainerValue(), new ItemName(itemName))
            </code>
        </script>
    </function>
</functionLibrary>
